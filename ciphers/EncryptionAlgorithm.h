#ifndef ENCRYPTIONALGORITHM_H // Препроцессорная директива для предотвращения множественного включения заголовка
#define ENCRYPTIONALGORITHM_H // Установка флага, указывающего, что файл был включен
#include <iostream>
 // Подключение библиотеки ввода-вывода для использования классов и функций ввода-вывода
#include <iomanip>
 // Подключение библиотеки для управления форматированием вывода, например, std::hex и std::setw
#include <sstream>
 // Подключение библиотеки для работы с потоками ввода-вывода в памяти (например, std::ostringstream)
#include <memory>
 // Подключение библиотеки для работы с умными указателями, такими как std::unique_ptr и std::shared_ptr
#include <string>
 // Подключение библиотеки для работы с классом строк std::string

// Определение абстрактного класса EncryptionAlgorithm, представляющего интерфейс для различных криптографических алгоритмов
class EncryptionAlgorithm {
public:
    virtual std::string encrypt(const std::string& text) = 0;
    // Виртуальная функция encrypt, которая должна быть реализована в классах-наследниках для шифрования текста
    virtual std::string decrypt(const std::string& text) = 0;
    // Виртуальная функция decrypt, которая должна быть реализована в классах-наследниках для расшифрования текста
    virtual ~EncryptionAlgorithm() = default;
    // Виртуальный деструктор, позволяющий корректно удалять объекты классов-наследников через указатель на базовый класс
};

// Завершение условия препроцессорной директивы #ifndef для предотвращения повторного включения файла
#endif // ENCRYPTIONALGORITHM_H

